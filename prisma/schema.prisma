// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  recipes   Recipe[]
  comments  Comment[]
  favorites Favorite[]
}

model Recipe {
  id                    Int        @id @default(autoincrement())
  title                 String     @db.VarChar(255)
  description           String
  ingredients           String
  instructions          String
  preparationTimeInSecs Int
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  authorId              Int
  author                User       @relation(fields: [authorId], references: [id])
  comments              Comment[]
  favorites             Favorite[]
  categories            Category[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

model Favorite {
  userId    Int
  recipeId  Int
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, recipeId])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  recipes Recipe[]
}
